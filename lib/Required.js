// Generated by CoffeeScript 1.6.3
(function() {
  var Module, Q, Required, fn, fs, path, required;

  fs = require('fs');

  Q = require('q');

  path = require('path');

  required = require('required');

  Module = require('module');

  Required = (function() {
    Required.prototype.file = null;

    Required.prototype.coreDepth = false;

    Required.prototype.coresAllowed = null;

    Required.prototype.files = null;

    Required.prototype.core = null;

    Required.prototype.processed = null;

    function Required(file) {
      this.file = file;
      this.files = [];
      this.core = {};
      this.coresAllowed = [];
      this.processed = [];
      if (!fs.existsSync(this.file)) {
        throw new Error('File ' + this.file + ' does not exist.');
      }
      if (!fs.statSync(this.file).isFile()) {
        throw new Error('Path ' + this.file + ' must be file.');
      }
    }

    Required.findMany = function(files, coreDepth, coresAllowed) {
      var deferred, file, r, result, _i, _len;
      if (coreDepth == null) {
        coreDepth = false;
      }
      if (coresAllowed == null) {
        coresAllowed = null;
      }
      result = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        r = new Required(file);
        r.coreDepth = coreDepth;
        if (coresAllowed !== null) {
          r.coresAllowed = coresAllowed;
        }
        result.push(r.find());
      }
      deferred = Q.defer();
      Q.all(result).then(function(data) {
        var deps, _j, _len1;
        result = {
          files: [],
          core: {}
        };
        for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
          deps = data[_j];
          result.files = result.files.concat(deps.files);
          result.core = Required.mergeObjects(result.core, deps.core);
        }
        result.files = Required.removeDuplicates(result.files);
        return deferred.resolve(result);
      }).fail(function(err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    };

    Required.prototype.find = function(file, depth) {
      var deferred,
        _this = this;
      if (file == null) {
        file = this.file;
      }
      if (depth == null) {
        depth = 1;
      }
      if (path.extname(file) !== '.js') {
        this.processed.push(file);
        return Q.resolve({
          files: this.files,
          core: this.core
        });
      }
      deferred = Q.defer();
      required(file, {
        ignoreMissing: true
      }, function(e, deps) {
        var dep, _i, _len;
        _this.processed.push(file);
        if (e) {
          return deferred.reject(e);
        } else {
          for (_i = 0, _len = deps.length; _i < _len; _i++) {
            dep = deps[_i];
            _this.parse(dep);
          }
          return _this.finish(depth).then(function(result) {
            return deferred.resolve(result);
          }).fail(function(err) {
            return deferred.reject(err);
          });
        }
      });
      return deferred.promise;
    };

    Required.prototype.parse = function(dep) {
      var sub, _i, _len, _ref, _results;
      if (dep.core === true) {
        if (typeof this.core[dep.id] === 'undefined') {
          return this.core[dep.id] = null;
        }
      } else {
        if (this.files.indexOf(dep.filename) === -1) {
          this.files.push(dep.filename);
          _ref = dep.deps;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            sub = _ref[_i];
            _results.push(this.parse(sub));
          }
          return _results;
        }
      }
    };

    Required.prototype.finish = function(depth) {
      var cores, deferred, module, p, _ref,
        _this = this;
      if (depth == null) {
        depth = 1;
      }
      deferred = Q.defer();
      cores = [];
      _ref = this.core;
      for (module in _ref) {
        p = _ref[module];
        if (this.coresAllowed.length > 0 && this.coresAllowed.indexOf(module) === -1) {
          this.core[module] = null;
        } else {
          this.core[module] = this.findCorePath(module);
        }
        if (this.core[module] !== null && this.processed.indexOf(this.core[module]) === -1 && this.coreDepth !== false && (this.coreDepth === true || (depth <= this.coreDepth))) {
          cores.push(this.find(this.core[module], depth + 1));
        }
      }
      Q.all(cores).then(function() {
        return deferred.resolve({
          files: _this.files,
          core: _this.core
        });
      }).fail(function(err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    };

    Required.prototype.findCorePath = function(name) {
      var dir, file, _i, _len, _ref;
      _ref = Module.globalPaths;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dir = _ref[_i];
        file = "" + dir + "/" + name + ".js";
        if (fs.existsSync(file) && fs.statSync(file).isFile()) {
          return file;
        }
      }
      return null;
    };

    Required.removeDuplicates = function(array) {
      return array.filter(function(el, pos) {
        return array.indexOf(el) === pos;
      });
    };

    Required.mergeObjects = function(first, second) {
      var key, value;
      for (key in second) {
        value = second[key];
        first[key] = value;
      }
      return first;
    };

    return Required;

  })();

  fn = function(file, coreDepth, coresAllowed) {
    var e, r;
    if (coreDepth == null) {
      coreDepth = false;
    }
    if (coresAllowed == null) {
      coresAllowed = null;
    }
    try {
      r = new Required(file);
    } catch (_error) {
      e = _error;
      return Q.reject(e);
    }
    r.coreDepth = coreDepth;
    if (coresAllowed !== null) {
      r.coresAllowed = coresAllowed;
    }
    return r.find();
  };

  fn.findMany = function(files, coreDepth, coresAllowed) {
    var e;
    if (coreDepth == null) {
      coreDepth = false;
    }
    if (coresAllowed == null) {
      coresAllowed = null;
    }
    try {
      return Required.findMany(files, coreDepth, coresAllowed);
    } catch (_error) {
      e = _error;
      return Q.reject(e);
    }
  };

  module.exports = fn;

}).call(this);
